#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: StackId-utilities-task
spec:
  inputs:
    resources:
    - name: docker-image
      type: image
    - name: git-source
      type: git
    params:
    - name: docker-imagename
      type: string
      default: ""
    - name: docker-imagetag
      type: string
      default: ""
  outputs:
    resources:
    - name: git-source
      type: git
  steps:
  - name: imagename-lowercase
    securityContext:
      privileged: true
    image: appsody/appsody-buildah:0.5.8-buildah1.9.0
    command: ["/bin/bash"]
    args:
      - -c
      - |
        #This step generates a script with the logic to change docker-image resource url with image_name as lowercase.
        # usage example 1 in usecases where input param 'docker-imagename=appsodyMPversion' and 'docker-imagetag=abcDEF' is present and 'docker-iamge' url= image-registry.openshift-image-registry.svc:5000/kabanero
        #  Then output should be url with docker-imagename 'appsodyMPversion' as lowercase, OutputURL = 'image-registry.openshift-image-registry.svc:5000/kabanero/appsodympversion:abcDEF'
        # usage example 2 in jenkins case where input param 'docker-imagename' and 'docker-imagetag' are empty ,'docker-image' url=docker.io/abcd, and if app-deploy file has 'name=java-MP-project' 
        #  Then first the url is constructed from 'app-deploy.yaml' file from the github application project. Secondly the imagename in the url is converted to lowercase.
        #  Output should be a constructed url and lowercase 'docker-imagename=java-mp-project', OutputURL = 'docker.io/abcd/java-mp-project' 

        cat <<- "EOF" > imageurl_imagename_lowercase.sh
        #Script Usage ./imageurl_imagename_lowercase.sh

        docker_registry_url=$(inputs.resources.docker-image.url)
        docker_imagename=$(inputs.params.docker-imagename)
        docker_imagetag=$(inputs.params.docker-imagetag)
        app_deploy_filename="app-deploy.yaml"

        if [[ -z "$docker_registry_url" ]]; then
           echo "Error : The input parameter docker-image resource url to the script is empty, please provide it and try again(Possible value example: docker.io/<docker-userid>, image-registry.openshift-image-registry.svc:5000/kabanero)"
           exit 1
        else
           if [[ -z "$docker_imagename"  ]]; then
              if [[ -f /workspace/$gitsource/$app_deploy_filename ]];then
                 cd /workspace/$gitsource
                 APPNAME=$(awk '/^  name:/ {print $2; exit}' $app_deploy_filename)

                 docker_imagename_lowercase=$(echo $APPNAME |  tr '[:upper:]' '[:lower:]')
              else
                 echo "Error : docker_imagename is empty and the $app_deploy_filename is not present in the github appsody project.
                 Either provide the value for the variable or make the $app_deploy_filename file available in the github appsody project
                 Case 1: If you are running a pipeline where you do not want the docker imagename to be coming from 'app-deploy.yaml' ,
                         you would need to provide the imagename from the Trigger file.
                         (Hint: Check the pipeline trigger file passing the input parameter 'docker_imagename' to the pipelines)
                 Case 2: If your requirement is to pull the imagename from the  'app-deploy.yaml' file variable 'name' , 
                         then you need to make sure that you have the file available in the appsody project in github whose url you have provided as git-source to the pipeline"
                 exit 1                 
              fi
           else
              docker_imagename_lowercase=$(echo $docker_imagename |  tr '[:upper:]' '[:lower:]')
           fi
        fi

        #If it reaches here it means it has set the variable docker_imagename_lowercase correctly.
        #Check if trailing '/' exists for docker registry url, it not add it.
        if [[ $docker_registry_url != */ ]];then
              docker_registry_url=$docker_registry_url/
        fi
        
        #Concatenate docker_registry_url with the docker_imagename_lowercase and docker_imagetag(if exists)
        if [[ ! -z "$docker_imagetag" ]]; then
            DOCKER_IMAGE_URL=$docker_registry_url$docker_imagename_lowercase:$docker_imagetag
        else
            DOCKER_IMAGE_URL=$docker_registry_url$docker_imagename_lowercase
        fi
        echo "$DOCKER_IMAGE_URL"
          
        EOF
        chmod 755 imageurl_imagename_lowercase.sh

        echo "imageurl_imagename_lowercase.sh content you built..."
        cat imageurl_imagename_lowercase.sh
        
        #Copy of all the content of git-source from input resources to output resources, so it could be passed to next task.
        cp -r $(inputs.resources.git-source.path)/. $(outputs.resources.git-source.path)
        #Copy the script 'imageurl_imagename_lowercase.sh' generated here to output git-source resource.
        cp imageurl_imagename_lowercase.sh $(outputs.resources.git-source.path)
    env:
    - name: gitsource
      value: git-source
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
  - name: enforce-stack-policy
    securityContext:
      privileged: true
    image: kabanero/kabanero-utils:0.8.0
    command: ["/bin/bash"]
    args:
      - -c
      - |
        cat <<- "EOF" > enforce_stack_policy.sh
        #############
        # Functions #
        #############
        
        #################
        # ignoreDigests #
        #################
        ignore_digests () {
        
           # If the version was "latest", sort all the installed versions to find the latest
           if [ "$VERSION" == "latest" ] && [ ! -z CLUSTER_STACK_VERSIONS ]; then
              echo 
              echo "INFO: The application stack, "$PROJECT/$STACK_NAME:$VERSION", in $APPSODY_CONFIG is active on this cluster and passes stackPolicy validation."
              exit 0  
           fi
           for STACK_VERSION in ${CLUSTER_STACK_VERSIONS}; do            
              # If the stack version starts with same pattern, we are done
              if [[ "$STACK_VERSION" == $VERSION* ]]; then
                 echo 
                 echo "INFO: The application stack, "$PROJECT/$STACK_NAME:$VERSION", in $APPSODY_CONFIG is active on this cluster and passes stackPolicy validation."
                 exit 0  
              fi  
           done  
           echo "ERROR: A compatible version of the application stack, "$PROJECT/$STACK_NAME:$VERSION", is not active on this cluster. Please review the active versions of the stack on the cluster (oc get stack $STACK_NAME -o json) and the stack specification in the $APPSODY_CONFIG file of the git project."
           echo "ERROR: Stack fails stackPolicy validation." 
           exit 1
        }
        
        
        #################
        # activeDigests #
        #################
        active_digests () {
 
           # Find matching versions
           for STACK_VERSION in ${CLUSTER_STACK_VERSIONS}
              do
                 if [[ "$STACK_VERSION" == $VERSION* ]]; then
                    CANDIDATE_STACK_VERSIONS+=$STACK_VERSION" "
                 fi
              done
           # Sort matching versions
           SORTED_CLUSTER_STACK_VERSIONS=$( echo "$CANDIDATE_STACK_VERSIONS" | tr ' ' '\n' | sort | tr '\n' ' ' )
           if [ -z "$SORTED_CLUSTER_STACK_VERSIONS" ]; then
              echo
              echo "ERROR: $APPSODY_CONFIG specifies a stack version of $VERSION , but there are no matching versions active. Versions active: $CLUSTER_STACK_VERSIONS"
              exit 1
           else
              # PATCH APPSODY-CONFIG
              LATEST=$( echo $SORTED_CLUSTER_STACK_VERSIONS | awk '{print $NF}' )
              PATCHED=${STACK//$VERSION/$LATEST}
              sed -i -e "s|$STACK|$PATCHED|g" /workspace/$GITSOURCE/$APPSODY_CONFIG
              echo "WARN: .appsody-config.yaml, stack: value patched from '$STACK' to '$PATCHED' according to stackPolicy setting of 'activeDigest'"
              echo "INFO: The application stack, "$PROJECT/$STACK_NAME:$VERSION", in $APPSODY_CONFIG is active on this cluster and fails stackPolcy validation."
              exit 0
           fi
        }
        
        
        #################
        # strictDigests #
        #################
        strict_digests () {

           if [ "$STACK_POLICY" == "strictDigest" ]; then
              echo "ERROR: A compatible version of the application stack, "$PROJECT/$STACK_NAME:$VERSION", is not active on this cluster. Please review the active versions of the stack on the cluster (oc get stack $STACK_NAME -o json) and the stack specification in the $APPSODY_CONFIG file of the git project."
              exit 1
           else
              # TODO: Clarify message, copied
              echo "INFO: The application stack, "$PROJECT/$STACK_NAME:$VERSION", in $APPSODY_CONFIG is active on this cluster and passes stackPolicy validation."
              exit 0
           fi 
        }
       
        ###  MAIN ###
       
        # env var gitsource
        GITSOURCE=$gitsource
        APPSODY_CONFIG=".appsody-config.yaml"
        IMAGE_REGISTRY_HOST=$DEFAULT_STACK_IMAGE_REGISTRY_URL
        IMAGE_REGISTRY_USERNAME=$DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME
        IMAGE_REGISTRY_PASSWORD=$DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD

        # Get stack policy
        # Values: strictDigest, activeDigest (default if blank), ignoreDigest and none
        # https://github.com/kabanero-io/kabanero-foundation/blob/master/design/digest.md

        STACK_POLICY=$( kubectl get kabanero kabanero -o json | jq -r '.spec.governancePolicy.stackPolicy' )
        # Default to value "activeDigest" - if the CR lacks a value, the default is to be used
        if [ -z "$STACK_POLICY" ] || [ "$STACK_POLICY" == "null" ]; then
           STACK_POLICY="activeDigest"
        fi
        
        if [ "$STACK_POLICY" == "none" ]; then
           echo
           echo "INFO: stackPolicy' under 'governancePolicy' is set to 'none', skipping stack validation."
           exit 0
        fi
        echo
        echo "INFO: Enforcing 'stackPolicy' of '$STACK_POLICY'."
        echo

        cd /workspace/$GITSOURCE
        if [ ! -f "$APPSODY_CONFIG" ]; then
           echo "ERROR: $APPSODY_CONFIG is not found in the root of the source directory. Unable to do stackPolicy validation."
           exit 1
        fi
        

        #########################################################################################
        # Read project, stack image, docker host and stack name from .appsody-config.yaml
        #########################################################################################
        echo
        echo "INFO: Read project, stack image, docker host and stack name from .appsody-config.yaml" 
        # Find the value for "stack:" from the appsody config file and assign it to the variable 'stack'
        declare $( awk '{if ($1 ~ "stack:"){printf "STACK="$2}}'  $APPSODY_CONFIG )
        if [ -z "$STACK" ]; then
           echo "INFO: $APPSODY_CONFIG does not contain a stack: definition. Unable to do stackPolicy validation."
           exit 1
        fi

        # Parse the image value for the repo, project, stackname and version
        # It can be in one of two formats based on appsody CLI used.
        # example 1: appsody/java-microprofile:0.2
        # example 2: image-registry.openshift-image-registry.svc:5000/kabanero/java-microprofile:0.2

        # For version get everything after last `:`
        VERSION="${STACK##*:}"
        echo "INFO: Git project config in $APPSODY_CONFIG... "
        echo "INFO: VERSION = $VERSION"

        # For project stack get everything before the last `:`
        PROJECT_STACK="${STACK%:*}"

        # The stack name could be after the 2nd or 3rd `/` based on appsody version. Check after 3rd first
        STACK_NAME="$(echo $PROJECT_STACK | cut -d'/' -f3 )"

        if [ -z "$STACK_NAME" ]; then
            PROJECT="$(echo $PROJECT_STACK | cut -d'/' -f1)"
            STACK_NAME="$( echo $PROJECT_STACK | cut -d'/' -f2 )"
        else
            STACK_REGISTRY="$(echo $PROJECT_STACK | cut -d'/' -f1)"
            PROJECT="$( echo $PROJECT_STACK | cut -d'/' -f2 )"
        fi

        echo "INFO: STACK_IMAGE_REGISTRY = $STACK_REGISTRY"
        echo "INFO: PROJECT = $PROJECT"
        echo "INFO: STACK_NAME = $STACK_NAME"

        # If the host wasn't specified, default to docker.io; if only specified in appsody-cfg.yaml use that
        # If it's in the config map use that and should match with what's in appsody-cfg.yaml
        if [ -z "$IMAGE_REGISTRY_HOST" ]; then
            if [ -z "$STACK_REGISTRY" ]; then
              IMAGE_REGISTRY_HOST="docker.io"
            else
              IMAGE_REGISTRY_HOST=$STACK_REGISTRY
            fi
        else
            if [ ! -z "$STACK_REGISTRY" ] && [ "$STACK_REGISTRY" != "$IMAGE_REGISTRY_HOST" ]; then
                RECONCILED_REGISTRY="TRUE"
                echo "WARNING: $APPSODY_CONFIG specifies different repository, $STACK_REGISTRY, than what's configured in the config map, $IMAGE_REGISTRY_HOST, in the cluster.  Config map entry takes priority.  Using $IMAGE_REGISTRY_HOST as the default stack registry."
            fi
        fi
        echo "INFO: Successfully read project, stack image, docker host and stack name from .appsody-config.yaml" 



        #########################################################################################
        # Validate stack name & project are present, active in the Kabanero CR
        #########################################################################################
        echo
        echo "INFO: Validate stack name & project are present, active in the Kabanero CR"
        # Check to make sure the stack is active by name first
        kubectl get stack $STACK_NAME -o json > /dev/null 2>&1
        if [ $? -ne 0 ]; then
           echo "ERROR: No versions of $STACK_NAME in $APPSODY_CONFIG are active in the cluster.  Stack fails stackPolicy validation since $STACK_NAME is not active."
           echo "ERROR: Stack messages = $?"
           exit 1
        fi
        # Check if the project names in the cfg file and active stack match
        CLUSTER_STACK_IMAGE=$( kubectl get stack $STACK_NAME  -o json | jq -r '.status.versions[].images[].image?' )
        echo "INFO: In the cluster..."
        echo "INFO: STACK_IMAGE = $CLUSTER_STACK_IMAGE"
        # The stack name could be after the 2nd or 3rd `/` based on appsody version. Check after 3rd first
        THIRD_ENTRY="$(echo $CLUSTER_STACK_IMAGE | cut -d'/' -f3 )"
        if [ -z "$THIRD_ENTRY" ]; then
            CLUSTER_PROJECT="$(echo $CLUSTER_STACK_IMAGE | cut -d'/' -f1)"
            CLUSTER_STACK="$(echo $CLUSTER_STACK_IMAGE | cut -d'/' -f2)"
        else
            CLUSTER_STACK_REGISTRY="$(echo $CLUSTER_STACK_IMAGE | cut -d'/' -f1)"
            CLUSTER_PROJECT="$( echo $CLUSTER_STACK_IMAGE | cut -d'/' -f2 )"
            CLUSTER_STACK="$(echo $CLUSTER_STACK_IMAGE | cut -d'/' -f3)"
        fi
        echo "INFO: STACK_IMAGE_REGISTRY = $CLUSTER_STACK_REGISTRY"
        echo "INFO: PROJECT = $CLUSTER_PROJECT"
        echo "INFO: STACK_NAME = $CLUSTER_STACK"
        if [ "$CLUSTER_PROJECT" != "$PROJECT" ]; then
            echo "ERROR: Project name, $CLUSTER_PROJECT, of active stack in cluster and project name in the stack in $APPSODY_CONFIG, $PROJECT, do not match."
            echo "ERROR: stackPolicy validation failed."
            exit 1
        fi
        echo "INFO: Sucessfully validated stack name & project are present, active in the Kabanero CR"

        #########################################################################################
        #  Main validation between operator and registry
        #########################################################################################
        # IgnoreDigests (always)  &  activeDigest (if failure for autopatch)
        CLUSTER_STACK_VERSIONS=$( kubectl get stack $STACK_NAME  -o json | jq -r '.status.versions[].version?' )
        CLUSTER_STACK_DIGESTS=$( kubectl get stack java-microprofile -o json | jq -r '.status.versions[].images[].digest.activation?' )
        echo
        echo "INFO: VERSIONS = $CLUSTER_STACK_VERSIONS"
        echo "INFO: DIGESTS  = $CLUSTER_STACK_DIGESTS"   
        
        if [ "$STACK_POLICY" == "ignoreDigest" ]; then
           ignore_digests
        fi

        # Get the target sha256 digest from the image registry. Use the proper credentials depending on what was passed to us
        echo "INFO: RECONCILED_STACK_IMAGE_REGISTRY_HOST = $IMAGE_REGISTRY_HOST"
        if [ -z "$IMAGE_REGISTRY_PASSWORD" ] || [ -z "$IMAGE_REGISTRY_USERNAME" ]; then
           TARGET_DIGEST=$( skopeo inspect --tls-verify=false docker://"$IMAGE_REGISTRY_HOST"/"$PROJECT"/"$STACK_NAME":"$VERSION" | jq '.Digest' )
        else
           TARGET_DIGEST=$( skopeo inspect --tls-verify=false --creds="$IMAGE_REGISTRY_USERNAME":"$IMAGE_REGISTRY_PASSWORD" docker://"$IMAGE_REGISTRY_HOST"/"$PROJECT"/"$STACK_NAME":"$VERSION" | jq '.Digest' )
        fi

        if [ -z "$TARGET_DIGEST" ]; then
           echo "$APPSODY_CONFIG specifies a stack version of $VERSION , but the image registry does not contain a version tagged with $VERSION, and fails stackPolicy validation."
           exit 1
        fi
 
        # Loop for digests - strictDigest & activeDigest
        for CURRENT_DIGEST in ${CLUSTER_STACK_DIGESTS}
           do              
              if [ "$TARGET_DIGEST" =  "\"sha256:$CURRENT_DIGEST\"" ]; then
                echo 
                echo "INFO: The application stack, "$PROJECT/$STACK_NAME:$VERSION", in $APPSODY_CONFIG is active on this cluster and passes stackPolicy validation."
                exit 0
              else
                 # Not found, iterate to next and pring debug info
                 echo "INFO: Cluster stack digest: $CURRENT_DIGEST"
                 echo "INFO: Project stack version: $VERSION, Project stack digest: $TARGET_DIGEST"
              fi
           done
        echo 
        
        
        if [ "$STACK_POLICY" == "strictDigest" ]; then
           strict_digests
        fi   
        
        if [ "$STACK_POLICY" == "activeDigest" ]; then
           active_digests
        fi   

        # All early exits, we should not get here
        echo "ERROR: stackPolicy of not $STACK_POLICY not recognized"
        exit 1
        EOF
        
        echo "Wrote enforce_stack_policy.sh to workspace:"
        cat enforce_stack_policy.sh
        
        chmod 755 enforce_stack_policy.sh
        
        #Copy of all the content of git-source from input resources to output resources, so it could be passed to next task.
        cp -r $(inputs.resources.git-source.path)/. $(outputs.resources.git-source.path)
        #Copy the script 'enforce_stack_policy.sh' generated here to output git-source resource.
        cp enforce_stack_policy.sh $(outputs.resources.git-source.path)
    env:
    - name: gitsource
      value: git-source
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers      
  volumes:
  - name: varlibcontainers
    emptyDir: {}