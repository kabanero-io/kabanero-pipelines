#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: StackId-imagename-lowercase-task
spec:
  inputs:
    resources:
    - name: git-source
      type: git
    - name: docker-image
      type: image
    params:
    - name: lowercase_usecase
      type: string
      default: non_jenkins 
  outputs:
    resources:
    - name: git-source
      type: git
  steps:
  - name: imagename-lowercase
    securityContext:
      privileged: true
    image: appsody/appsody-buildah:0.5.8-buildah1.9.0
    command: ["/bin/bash"]
    args:
      - -c
      - |
        #This step generates a script with the logic to make docker-image resource url with image_name as lowercase
        # usage example 1 in usecases where input param 'lowercase_usecase' is empty and 'docker-iamge' url= image-registry.openshift-image-registry.svc:5000/kabanero/appsodyMPversion:abcDEF
        #  Then output should be url with imagename'appsodyMPversion' as lowercase, OutputURL = 'image-registry.openshift-image-registry.svc:5000/kabanero/appsodympversion:abcDEF'
        # usage example 2 in jenkins case where input param 'lowercase_usecase=jenkins'  'docker-image' url=docker.io/abcd, and if app-deploy file has 'name=java-MP-project' 
        #  Then first the url is constructed from 'app-deploy.yaml' file from the github application project. Secondly the imagename in the url is converted to lowercase.
        #  Output should be a constructed url and lowercase 'imagename=java-mp-project', OutputURL = 'docker.io/abcd/java-mp-project:latest' 

        echo "lowercase_usecase=$(inputs.params.lowercase_usecase)"

        cat <<- "EOF" > imageurl_imagename_lowercase.sh
        #Script Usage ./imageurl_imagename_lowercase.sh

        INPUTS_RESOURCE_DOCKER_IMAGE_URL=$(inputs.resources.docker-image.url)
        USE_CASE=$(inputs.params.lowercase_usecase)

        #checking if the first input parameter INPUTS_RESOURCE_DOCKER_IMAGE_URL is empty
        #Else condition checks if the INPUTS_RESOURCE_DOCKER_IMAGE_URL is correct with atleast one '/'
        if [[ -z "$INPUTS_RESOURCE_DOCKER_IMAGE_URL" ]]; then
           echo "The input parameter docker-image resource url to the script is empty, please provide it and try again"
           exit 1
        else
           if [[ ! $INPUTS_RESOURCE_DOCKER_IMAGE_URL == *"/"* ]]; then
              echo "docker-image resource url=$INPUTS_RESOURCE_DOCKER_IMAGE_URL does not have /, please enter correct url"
              exit 1
           fi
        fi
 
        #checks if the second input parameter is not empty and is USE_CASE='jenkins' then we need to construct INPUTS_RESOURCE_DOCKER_IMAGE_URL from app-deploy.yaml
        if [[ ! -z "$USE_CASE" && "$USE_CASE" == "jenkins" ]]; then
           # get appsody application name
           cd /workspace/$gitsource
           APPNAME=$(awk '/^  name:/ {print $2; exit}' app-deploy.yaml)
           APPNAME_LOWERCASE=$(echo $APPNAME |  tr '[:upper:]' '[:lower:]')
           TAGNAME="$APPNAME_LOWERCASE:latest"
  
           INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$INPUTS_RESOURCE_DOCKER_IMAGE_URL/$TAGNAME
        else
          # we cut the string with last occurance of '/' to get image name and tag as secondHalf of URL
          firstHalfURL=$(echo $INPUTS_RESOURCE_DOCKER_IMAGE_URL | rev | cut -d"/" -f2- | rev)
          secondHalfURL=$(echo $INPUTS_RESOURCE_DOCKER_IMAGE_URL | rev | cut -d"/" -f1 | rev)

          #Conditional check if ':' is present in 'secondHalfURL'.
          #for ex - secondHalfURL=appsodympversion:abcDEF
          if [[ $secondHalfURL == *":"* ]]; then
            imagename=$(cut -d ':' -f 1 <<< "$secondHalfURL" )
            imagename_lowercase=$(echo $imagename |  tr '[:upper:]' '[:lower:]')
            tagname=$(cut -d ':' -f 2- <<< "$secondHalfURL" )
            INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$firstHalfURL/$imagename_lowercase:$tagname
          #conditional check where no tag is present in the url, ex - secondHalfURL=appsodympversion
          else
            imagename=$secondHalfURL
            imagename_lowercase=$(echo $imagename |  tr '[:upper:]' '[:lower:]')
            INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$firstHalfURL/$imagename_lowercase
          fi
        fi
          echo "$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"
        EOF
        chmod 755 imageurl_imagename_lowercase.sh

        echo "imageurl_imagename_lowercase.sh content you built..."
        cat imageurl_imagename_lowercase.sh
         
        #Copy of all the content of git-source from input resources to output resources, so it could be passed to next task.
        cp -r $(inputs.resources.git-source.path)/. $(outputs.resources.git-source.path)
        #Copy the script 'imageurl_imagename_lowercase.sh' generated here to output git-source resource.
        cp imageurl_imagename_lowercase.sh $(outputs.resources.git-source.path) 
    env:
    - name: gitsource
      value: git-source
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
  volumes:
  - name: varlibcontainers
    emptyDir: {}