#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: StackId-validate-stack-task
spec:
  inputs:
    resources:
    - name: git-source
      type: git
  steps:
  - name: validate-stack-is-active
    securityContext:
      privileged: true
    image: kabanero/validate-stack:0.6.0
    command: ["/bin/bash"]
    args:
      - -c
      - |
        # env var gitsource
        GITSOURCE=$gitsource
        APPSODY_CONFIG=".appsody-config.yaml"
        IMAGE_REGISTRY_HOST=$DEFAULT_STACK_IMAGE_REGISTRY_URL
        IMAGE_REGISTRY_USERNAME=$DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME
        IMAGE_REGISTRY_PASSWORD=$DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD
        
        
        cd /workspace/$GITSOURCE
        if [ ! -f "$APPSODY_CONFIG" ]; then
           echo $APPSODY_CONFIG" is not found in the root of the source directory. Unable to validate if the stack is active."
           exit 1
        fi
        
        # Find the value for "stack:" from the appsody config file and assign it to the variable 'stack'
        declare $( awk '{if ($1 ~ "stack:"){printf "STACK="$2}}'  $APPSODY_CONFIG )
        if [ -z "$STACK" ]; then
           echo "$APPSODY_CONFIG does not contain a stack: definition. Unable to validate if the stack is active."
           exit 1
        fi
        
        # Parse the image value for the repo, project, stackname and version
        # It can be in one of two formats based on appsody CLI used.
        # example 1: appsody/java-microprofile:0.2
        # example 2: image-registry.openshift-image-registry.svc:5000/kabanero/java-microprofile:0.2

        # For version get everything after last `:`
        VERSION="${STACK##*:}"
        echo "In $APPSODY_CONFIG... "
        echo "VERSION = $VERSION"

        # For project stack get everything before the last `:`
        PROJECT_STACK="${STACK%:*}"

        # The stack name could be after the 2nd or 3rd `/` based on appsody version. Check after 3rd first
        STACK_NAME="$(echo $PROJECT_STACK | cut -d'/' -f3 )"

        if [ -z "$STACK_NAME" ]; then
            PROJECT="$(echo $PROJECT_STACK | cut -d'/' -f1)"
            STACK_NAME="$( echo $PROJECT_STACK | cut -d'/' -f2 )"
        else
            STACK_REGISTRY="$(echo $PROJECT_STACK | cut -d'/' -f1)"
            PROJECT="$( echo $PROJECT_STACK | cut -d'/' -f2 )"
        fi

        echo "STACK_REGISTRY in $APPSODY_CONFIG = $STACK_REGISTRY"
        echo "PROJECT in $APPSODY_CONFIG = $PROJECT"
        echo "STACK_NAME in $APPSODY_CONFIG = $STACK_NAME"

        # If the host wasn't specified, default to docker.io; if only specified in appsody-cfg.yaml use that
        # If it's in the config map use that and should match with what's in appsody-cfg.yaml
        if [ -z "$IMAGE_REGISTRY_HOST" ]; then
            if [ -z "$STACK_REGISTRY" ]; then
              IMAGE_REGISTRY_HOST="docker.io"
            else
              IMAGE_REGISTRY_HOST=$STACK_REGISTRY
            fi
        else  
            if [ ! -z "$STACK_REGISTRY" ] && [ "$STACK_REGISTRY" != "$IMAGE_REGISTRY_HOST" ]; then
                echo "WARNING - $APPSODY_CONFIG specifies different repository, $STACK_REGISTRY, than what's configured in the config map, $IMAGE_REGISTRY_HOST in the cluster.  They should be in sync.  Config map entry takes priority.  Using $IMAGE_REGISTRY_HOST as the default stack registry."
            fi
        fi

        echo "STACK_IMAGE_REGISTRY_HOST = $IMAGE_REGISTRY_HOST"

        # Check to make sure the stack is active by name first
        kubectl get stack $STACK_NAME -o json > /dev/null 2>&1
        if [ $? -ne 0 ]; then
           echo "$APPSODY_CONFIG specifies stack $STACK_NAME , but no versions of $STACK_NAME are active, and cannot be built."
           echo "Stack messages = $?"
           exit 1
        fi

        # Check if the project names in the cfg file and active stack match
        CLUSTER_STACK_IMAGE=$( kubectl get stack $STACK_NAME  -o json | jq -r '.status.versions[].images[].image?' ) 
        echo "In the cluster..."
        echo "CLUSTER_STACK_IMAGE is $CLUSTER_STACK_IMAGE"

        # The stack name could be after the 2nd or 3rd `/` based on appsody version. Check after 3rd first
        THIRD_ENTRY="$(echo $CLUSTER_STACK_IMAGE | cut -d'/' -f3 )"

        if [ -z "$THIRD_ENTRY" ]; then
            CLUSTER_PROJECT="$(echo $CLUSTER_STACK_IMAGE | cut -d'/' -f1)"
        else
            CLUSTER_STACK_REGISTRY="$(echo $CLUSTER_STACK_IMAGE | cut -d'/' -f1)"
            CLUSTER_PROJECT="$( echo $CLUSTER_STACK_IMAGE | cut -d'/' -f2 )"
        fi

        if [ "$CLUSTER_PROJECT" != "$PROJECT" ]; then
            echo "Project name, $CLUSTER_PROJECT, of active stack in cluster and project name in the stack in $APPSODY_CONFIG, $PROJECT, do not match."
            echo "Validation failed. Stack cannot be built."
            exit 1
        fi

        # TODO add registry validation logic here.  Implictly handled by digest check.
        # But can give a better error message with just a name check

        # Get the 3 digit stack values
        # Assumed the version(s) are in the metadata
        STACK_VERSIONS=$( kubectl get stack $STACK_NAME  -o json | jq -r '.status.versions[].version?' )    
        
        # Get the target sha256 digest from the image registry. Use the proper credentials depending on what was passed to us
        if [ -z "$IMAGE_REGISTRY_PASSWORD" ] || [ -z "$IMAGE_REGISTRY_USERNAME" ]; then
           TARGET_DIGEST=$( skopeo inspect --tls-verify=false docker://"$IMAGE_REGISTRY_HOST"/"$PROJECT"/"$STACK_NAME":"$VERSION" | jq '.Digest' )
        else
           TARGET_DIGEST=$( skopeo inspect --tls-verify=false --creds="$IMAGE_REGISTRY_USERNAME":"$IMAGE_REGISTRY_PASSWORD" docker://"$IMAGE_REGISTRY_HOST"/"$PROJECT"/"$STACK_NAME":"$VERSION" | jq '.Digest' )
        fi    
        
        if [ -z "$TARGET_DIGEST" ]; then
           echo "$APPSODY_CONFIG specifies a stack version of $VERSION , but the image registry does not contain a version tagged with $VERSION, and cannot be built."
           exit 1
        fi
        
        for STACK_VERSION in ${STACK_VERSIONS}
           do
              if [ -z "$IMAGE_REGISTRY_PASSWORD" ] || [ -z "$IMAGE_REGISTRY_USERNAME" ]; then
                 CURRENT_DIGEST=$( skopeo inspect --tls-verify=false docker://"$IMAGE_REGISTRY_HOST"/"$PROJECT"/"$STACK_NAME":"$STACK_VERSION" | jq '.Digest' )
              else
                 CURRENT_DIGEST=$( skopeo inspect --tls-verify=false --creds="$IMAGE_REGISTRY_USERNAME":"$IMAGE_REGISTRY_PASSWORD" docker://"$IMAGE_REGISTRY_HOST"/"$PROJECT"/"$STACK_NAME":"$STACK_VERSION" | jq '.Digest' )
              fi    
       
              if [ "$TARGET_DIGEST" =  "$CURRENT_DIGEST" ]; then
                 echo "The Kabanero stack contained in $STACK is active on this system and can be built."
                 exit 0
              else
                 echo "Version: $STACK_VERSION, Digest: $CURRENT_DIGEST, Target Digest: $TARGET_DIGEST"
              fi
           done
        
           echo "The Kabanero stack contained in "$STACK" is not active on this system and contained in the image registry and cannot be built."
           exit 1
    env:
    - name: gitsource
      value: git-source
    - name: DEFAULT_STACK_IMAGE_REGISTRY_URL
      valueFrom:
        configMapKeyRef:
         name: stack-image-registry-map
         key: default-stack-image-registry-url
         optional: true
    - name: DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME
      valueFrom:
        secretKeyRef:
          name: default-stack-image-registry-secret
          key: username
          optional: true
    - name: DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD
      valueFrom:
        secretKeyRef:
          name: default-stack-image-registry-secret
          key: password
          optional: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - name: config-volume
      mountPath: /config
    - name: secret-volume
      mountPath: /etc/secret-volume
  volumes:
  - name: varlibcontainers
    emptyDir: {}
  - name: config-volume
    configMap:
      name: stack-image-registry-map
      optional: true
  - name: secret-volume
    secret:
      secretName: default-stack-image-registry-secret
      optional: true
