#Kabanero! on activate substitute Digest for text 'StackId'
#
# This task will build an appsody project specificed in the git-source using `appsody build` 
# and push the generated application image to the specified image registry. The image can be optionally
# signed before it's pushed to the registry.
#
# Insecure registy access or secure connection to the image registry can be setup by configuring the 
# OpenShift cluster resource.  For more information, refer to https://kabanero.io/guides/working-with-pipelines/#transport-layer-security-tls-verification-for-image-registry-access-in-pipelines
#
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: StackId-build-push-jk-task
spec:
  resources:
    inputs:
    - name: git-source
      type: git
    - name: docker-image
      type: image
    outputs:
    - name: docker-image
      type: image
    - name: git-source
      type: git
  params:
  - name: docker-imagename
    type: string
    default: "null"
  - name: docker-imagetag
    type: string
    default: "null"
  steps:
  - name: build
    # This steps builds the source project using appsody build.
    securityContext:
      privileged: true
    image: kabanero/kabanero-utils@sha256:d2534cb30f618975bd5a9554920050b36d1bde5a882e8bacf100773847ec9ae8
    command: ["/bin/bash"]
    args:
      - -c
      - |
        # Configure image registry access in the container by adding it to the insecure registry list or enabling TLS verification
        # by adding it to the trust store based on OpenShift cluster resource configuration.
        echo "[INFO] Running the script /scripts/image_registry_access_setup.sh ...."
        /scripts/image_registry_access_setup.sh
        retVal=$?
        if [ $retVal -ne 0 ]
        then
           echo "[ERROR] The script failed(/scripts/image_registry_access_setup.sh), and the image registry access setup was not complete, aborting the pipelinerun" >&2
           exit $retVal
        fi

        # Docker does not support upper case characters in the image name.  Github does not have this restriction.
        # So lowercase the image name if it has any upper case characters.        
        OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( /scripts/imageurl_imagename_lowercase.sh -u "$(inputs.resources.docker-image.url)" -n "$(inputs.params.docker-imagename)" -t "$(inputs.params.docker-imagetag)" )
        retVal=$?
        if [ $retVal -ne 0 ]
        then
           echo "[ERROR] The script failed(/scripts/imageurl_imagename_lowercase.sh) Reason: $OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" >&2
           exit $retVal
        fi
        
        OUTPUTS_STACK_IMAGE_REGISTRY_URL=$( /scripts/stack_registry_url_setup.sh )
        retVal=$?
        if [ $retVal -ne 0 ]
        then
           echo "[ERROR] The script failed(/scripts/stack_registry_url_setup.sh) Reason: $OUTPUTS_STACK_IMAGE_REGISTRY_URL" >&2
           exit $retVal
        fi

        echo "[INFO] Stack registry URL = $OUTPUTS_STACK_IMAGE_REGISTRY_URL"
        echo "[INFO] Application image URL = $OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"

        cd /workspace/$gitsource
        appsody build -t "$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" --buildah --buildah-options "--format=docker" --stack-registry "$OUTPUTS_STACK_IMAGE_REGISTRY_URL"
        if [ $? != 0 ]; then
            echo "[ERROR] Appsody build failed.  Please review the appsody build logs above.  Pipeline run aborted."
            exit 1
        fi
        
        echo "[INFO] Copying the generated app-deploy.yaml file from input to the output to pass the file to the next task when this task is used in deploy pipeline"
        cp app-deploy.yaml $(outputs.resources.git-source.path)
    env:
    - name: gitsource
      value: git-source
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
  - name: push
    # Push the image built in the build step to the specified image registry.  Optionally sign the image.
    securityContext:
      privileged: true
    image: kabanero/kabanero-utils@sha256:d2534cb30f618975bd5a9554920050b36d1bde5a882e8bacf100773847ec9ae8
    command: ["/bin/bash"]
    args:
      - -c
      - |
        # Docker does not support upper case characters in the image name.  Github does not have this restriction.
        # So lowercase the image name if it has any upper case characters.
        OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( /scripts/imageurl_imagename_lowercase.sh -u "$(inputs.resources.docker-image.url)" -n "$(inputs.params.docker-imagename)" -t "$(inputs.params.docker-imagetag)" )
        retVal=$?
        if [ $retVal -ne 0 ]
        then
           echo "[ERROR] The script failed(/scripts/imageurl_imagename_lowercase.sh) Reason: $OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" >&2
           exit $retVal
        fi
        echo "[INFO] Application image URL = $OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"

        # Configure image registry access in the container by adding it to the insecure registry list or enabling TLS verification
        # by adding it to the trust store based on OpenShift cluster resource configuration.
        echo "[INFO] Running the script /scripts/image_registry_access_setup.sh ...."
        /scripts/image_registry_access_setup.sh
        retVal=$?
        if [ $retVal -ne 0 ]
        then
           echo "[ERROR] The script failed(/scripts/image_registry_access_setup.sh)" >&2
           exit $retVal
        fi


        #if /image-signing-config/registry does not exist, a container image signature is not generated.
        if [ -f "/image-signing-config/registry" ]; then
            REPO=`cat /image-signing-config/registry`
        fi
        if [[ -z $REPO ]] || [[ $OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE != $REPO/* ]]; then
           echo "[INFO] Signature will not be generated. The signed image repository is not set or does not match the target registry."
           buildah push "$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" "docker://$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"
        else
           echo "[INFO] Signature will be generated."
           #importing RSA secret key, then extract an e-mail address from it.
           gpg --import /image-signing-config/secret.asc
           SIGNBY=`gpg --list-keys|sed -n -e "/.*<.*>.*/p"|sed -e "s/^.*<\(.*\)>.*$/\1/"`
           skopeo copy --remove-signatures --sign-by $SIGNBY "containers-storage:$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" "docker://$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"
           RESULT=$?
           if [ $RESULT -ne 0 ]; then
              echo "[ERROR] sign-image failed. exit code : $RESULT"
              exit $RESULT
           fi
           if [[ -z `cat /image-signing-config/sigstore` ]]; then
              echo "[INFO] Signature is stored in the image registry"
           else
              #invoking scripts for processing a generated signature.
              echo "[INFO] A signature is stored by scripts."
              for f in /sigstore-script/*; do [ -f "$f" ] || break; echo "[INFO] Processing $f"; $f;  done
           fi
        fi
    env:
    - name: gitsource
      value: git-source
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /image-signing-config
      name: image-signing-config
    - mountPath: /etc/containers/registries.d
      name: registries-d
    - mountPath: /sigstore-script
      name: sigstore-script

  volumes:
  - name: varlibcontainers
    emptyDir: {}
  - name: registries-d
    configMap:
      name: registries-d
      optional: true
  - name: sigstore-script
    configMap:
      name: sigstore-script
      defaultMode: 0555
      optional: true
  - name: image-signing-config
    secret:
      secretName: image-signing-config
      optional: true
