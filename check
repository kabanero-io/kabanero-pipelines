
       
        

        ####### 5. loop
        # OLD loop for stack versions - ignoreDigests
        #
        # ignoreDigests
        #
        
        # If the version was "latest", sort all the installed versions to find the latest
        if [ "$VERSION" == "latest" ] && [ ! -z CLUSTER_STACK_VERSIONS ]; then
           echo 
           echo "INFO: The application stack, "$PROJECT/$STACK_NAME:$VERSION", in $APPSODY_CONFIG is active on this cluster and passes stackPolicy validation."
           exit 0  
        fi
           
        
        for STACK_VERSION in ${CLUSTER_STACK_VERSIONS}
           do
              # Two things
              #   1.  Does the version from the .appsody-cofig match?  Exactly? DONE   StartsWith? Yes? Sort all sorts with     NO?  Fail. 
              #   Weird case -  "latest"  - Sort all - use absolute latest tag.   

          
              # If the stack version starts with same pattern, we are done
              if [[ "$STACK_VERSION" == $VERSION* ]]; then
                 echo 
                 echo "INFO: The application stack, "$PROJECT/$STACK_NAME:$VERSION", in $APPSODY_CONFIG is active on this cluster and passes stackPolicy validation."
                 exit 0  
              fi  
           done  

       echo "ERROR: A compatible version of the application stack, "$PROJECT/$STACK_NAME:$VERSION", is not active on this cluster. Please review the active versions of the stack on the cluster (oc get stack $STACK_NAME -o json) and the stack specification in the $APPSODY_CONFIG file of the git project."
       echo "ERROR: Stack fails stackPolicy validation." 
       exit 1
        
        
        
        
        
        
        if [ "$STACK_POLICY" == "strictDigest" ]; then
           echo "ERROR: A compatible version of the application stack, "$PROJECT/$STACK_NAME:$VERSION", is not active on this cluster. Please review the active versions of the stack on the cluster (oc get stack $STACK_NAME -o json) and the stack specification in the $APPSODY_CONFIG file of the git project."
           exit 1
        fi
        
        
        
        
        
        
        
        
        # This is block to attempt to patch .appsody-config.yaml stack version,if a compatible version exists
        if [ "$STACK_POLICY" == "activeDigest" ]; then
           # Find matching versions
           for STACK_VERSION in ${CLUSTER_STACK_VERSIONS}
              do
                 if [[ "$STACK_VERSION" == $VERSION* ]]; then
                    CANDIDATE_STACK_VERSIONS+=$STACK_VERSION" "
                 fi
              done
           # Sort matching versions
           SORTED_CLUSTER_STACK_VERSIONS=$( echo "$CANDIDATE_STACK_VERSIONS" | tr ' ' '\n' | sort | tr '\n' ' ' )
           if [ -z "$SORTED_CLUSTER_STACK_VERSIONS" ]; then
              echo
              echo "ERROR: $APPSODY_CONFIG specifies a stack version of $VERSION , but there are no matching versions active. Versions active: $CLUSTER_STACK_VERSIONS"
              exit 1
           else
              # PATCH APPSODY-CONFIG
              LATEST=$( echo $SORTED_CLUSTER_STACK_VERSIONS | awk '{print $NF}' )
              PATCHED=${STACK//$VERSION/$LATEST}
              sed -i -e "s|$STACK|$PATCHED|g" /workspace/$GITSOURCE/$APPSODY_CONFIG
              echo "WARN: .appsody-config.yaml, stack: value patched from '$STACK' to '$PATCHED' according to stackPolicy setting of 'activeDigest'"
              echo "INFO: The application stack, "$PROJECT/$STACK_NAME:$VERSION", in $APPSODY_CONFIG is active on this cluster and can be built."
              exit 0
           fi

        fi
             
             
             
             
             
               github: {}
  governancePolicy:
    stackPolicy: none
  landing: {}
  sso: {}
                